{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "98c6e642",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-12-01T22:27:44.759472Z",
     "iopub.status.busy": "2024-12-01T22:27:44.759085Z",
     "iopub.status.idle": "2024-12-01T22:27:45.700215Z",
     "shell.execute_reply": "2024-12-01T22:27:45.699024Z"
    },
    "papermill": {
     "duration": 0.947756,
     "end_time": "2024-12-01T22:27:45.702715",
     "exception": false,
     "start_time": "2024-12-01T22:27:44.754959",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s4e12/sample_submission.csv\n",
      "/kaggle/input/playground-series-s4e12/train.csv\n",
      "/kaggle/input/playground-series-s4e12/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "75cf2bfc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-01T22:27:45.709087Z",
     "iopub.status.busy": "2024-12-01T22:27:45.708584Z",
     "iopub.status.idle": "2024-12-01T22:27:56.342651Z",
     "shell.execute_reply": "2024-12-01T22:27:56.341482Z"
    },
    "papermill": {
     "duration": 10.639607,
     "end_time": "2024-12-01T22:27:56.344884",
     "exception": false,
     "start_time": "2024-12-01T22:27:45.705277",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id                        int64\n",
      "Age                     float64\n",
      "Gender                   object\n",
      "Annual Income           float64\n",
      "Marital Status           object\n",
      "Number of Dependents    float64\n",
      "Education Level          object\n",
      "Occupation               object\n",
      "Health Score            float64\n",
      "Location                 object\n",
      "Policy Type              object\n",
      "Previous Claims         float64\n",
      "Vehicle Age             float64\n",
      "Credit Score            float64\n",
      "Insurance Duration      float64\n",
      "Policy Start Date        object\n",
      "Customer Feedback        object\n",
      "Smoking Status           object\n",
      "Exercise Frequency       object\n",
      "Property Type            object\n",
      "Premium Amount          float64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# load data\n",
    "train_data_filename = \"/kaggle/input/playground-series-s4e12/train.csv\"\n",
    "test_data_filename = \"/kaggle/input/playground-series-s4e12/test.csv\"\n",
    "train_data = pd.read_csv(train_data_filename)\n",
    "test_data = pd.read_csv(test_data_filename)\n",
    "\n",
    "print(train_data.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e6ad8c56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-01T22:27:56.351448Z",
     "iopub.status.busy": "2024-12-01T22:27:56.350783Z",
     "iopub.status.idle": "2024-12-01T22:28:01.011753Z",
     "shell.execute_reply": "2024-12-01T22:28:01.010580Z"
    },
    "papermill": {
     "duration": 4.666815,
     "end_time": "2024-12-01T22:28:01.014168",
     "exception": false,
     "start_time": "2024-12-01T22:27:56.347353",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Age  Annual Income  Number of Dependents  Health Score  Previous Claims  \\\n",
      "0  19.0        10049.0                   1.0     22.598761              2.0   \n",
      "1  39.0        31678.0                   3.0     15.569731              1.0   \n",
      "2  23.0        25602.0                   3.0     47.177549              1.0   \n",
      "3  21.0       141855.0                   2.0     10.938144              1.0   \n",
      "4  21.0        39651.0                   1.0     20.376094              0.0   \n",
      "\n",
      "   Vehicle Age  Credit Score  Insurance Duration  Policy Start Date  \\\n",
      "0         17.0         372.0                 5.0       1.703345e+18   \n",
      "1         12.0         694.0                 2.0       1.686583e+18   \n",
      "2         14.0           0.0                 3.0       1.696087e+18   \n",
      "3          0.0         367.0                 1.0       1.718206e+18   \n",
      "4          8.0         598.0                 4.0       1.638372e+18   \n",
      "\n",
      "   Gender_Female  ...  Smoking Status_nan  Exercise Frequency_Daily  \\\n",
      "0            1.0  ...                 0.0                       0.0   \n",
      "1            1.0  ...                 0.0                       0.0   \n",
      "2            0.0  ...                 0.0                       0.0   \n",
      "3            0.0  ...                 0.0                       1.0   \n",
      "4            0.0  ...                 0.0                       0.0   \n",
      "\n",
      "   Exercise Frequency_Monthly  Exercise Frequency_Rarely  \\\n",
      "0                         0.0                        0.0   \n",
      "1                         1.0                        0.0   \n",
      "2                         0.0                        0.0   \n",
      "3                         0.0                        0.0   \n",
      "4                         0.0                        0.0   \n",
      "\n",
      "   Exercise Frequency_Weekly  Exercise Frequency_nan  Property Type_Apartment  \\\n",
      "0                        1.0                     0.0                      0.0   \n",
      "1                        0.0                     0.0                      0.0   \n",
      "2                        1.0                     0.0                      0.0   \n",
      "3                        0.0                     0.0                      1.0   \n",
      "4                        1.0                     0.0                      0.0   \n",
      "\n",
      "   Property Type_Condo  Property Type_House  Property Type_nan  \n",
      "0                  0.0                  1.0                0.0  \n",
      "1                  0.0                  1.0                0.0  \n",
      "2                  0.0                  1.0                0.0  \n",
      "3                  0.0                  0.0                0.0  \n",
      "4                  0.0                  1.0                0.0  \n",
      "\n",
      "[5 rows x 49 columns]\n"
     ]
    }
   ],
   "source": [
    "# split data\n",
    "\n",
    "X_train = train_data.drop([\"id\", \"Premium Amount\"], axis=1)\n",
    "X_train[\"Policy Start Date\"] = pd.to_datetime(X_train[\"Policy Start Date\"]).values.astype(\"float64\")\n",
    "X_train = pd.get_dummies(X_train, dummy_na=True, dtype=float) # one hot encoding\n",
    "X_train = X_train.fillna(0)\n",
    "y_train = train_data[\"Premium Amount\"]\n",
    "\n",
    "X_test = test_data.drop([\"id\"], axis=1)\n",
    "X_test[\"Policy Start Date\"] = pd.to_datetime(X_test[\"Policy Start Date\"]).values.astype(\"float64\")\n",
    "X_test = pd.get_dummies(X_test, dummy_na=True, dtype=float) # one hot encoding\n",
    "X_test = X_test.fillna(0)\n",
    "\n",
    "print(X_train.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "804b5a5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-01T22:28:01.020243Z",
     "iopub.status.busy": "2024-12-01T22:28:01.019894Z",
     "iopub.status.idle": "2024-12-01T22:30:22.880914Z",
     "shell.execute_reply": "2024-12-01T22:30:22.877614Z"
    },
    "papermill": {
     "duration": 141.870805,
     "end_time": "2024-12-01T22:30:22.887421",
     "exception": false,
     "start_time": "2024-12-01T22:28:01.016616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.474e+11, tolerance: 8.979e+07\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ElasticNet(max_iter=2000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ElasticNet</label><div class=\"sk-toggleable__content\"><pre>ElasticNet(max_iter=2000)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "ElasticNet(max_iter=2000)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# load and fit elastic net model\n",
    "from sklearn.linear_model import ElasticNet\n",
    "\n",
    "my_model = ElasticNet(max_iter=2000)\n",
    "\n",
    "my_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "11dd56d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-01T22:30:22.900027Z",
     "iopub.status.busy": "2024-12-01T22:30:22.897826Z",
     "iopub.status.idle": "2024-12-01T22:30:25.123077Z",
     "shell.execute_reply": "2024-12-01T22:30:25.121600Z"
    },
    "papermill": {
     "duration": 2.233837,
     "end_time": "2024-12-01T22:30:25.125711",
     "exception": false,
     "start_time": "2024-12-01T22:30:22.891874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        id  Premium Amount\n",
      "0  1200000     1096.647321\n",
      "1  1200001     1058.319261\n",
      "2  1200002     1071.529968\n",
      "3  1200003     1085.212508\n",
      "4  1200004     1078.281706\n"
     ]
    }
   ],
   "source": [
    "# make predictions and submit\n",
    "predictions = my_model.predict(X_test)\n",
    "\n",
    "predictions = pd.DataFrame({\"id\" : test_data[\"id\"], \"Premium Amount\" : predictions})\n",
    "\n",
    "print(predictions.head())\n",
    "\n",
    "predictions.to_csv(\"/kaggle/working/submission.csv\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 10305135,
     "sourceId": 84896,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 163.858197,
   "end_time": "2024-12-01T22:30:25.852344",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-01T22:27:41.994147",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
