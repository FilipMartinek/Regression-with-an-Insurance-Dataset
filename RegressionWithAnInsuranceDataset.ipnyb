{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":84896,"databundleVersionId":10305135,"sourceType":"competition"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-17T21:07:51.201566Z","iopub.execute_input":"2024-12-17T21:07:51.204049Z","iopub.status.idle":"2024-12-17T21:07:51.905566Z","shell.execute_reply.started":"2024-12-17T21:07:51.203947Z","shell.execute_reply":"2024-12-17T21:07:51.903935Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e12/sample_submission.csv\n/kaggle/input/playground-series-s4e12/train.csv\n/kaggle/input/playground-series-s4e12/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"# load data\ntrain_data_filename = \"/kaggle/input/playground-series-s4e12/train.csv\"\ntest_data_filename = \"/kaggle/input/playground-series-s4e12/test.csv\"\ntrain_data = pd.read_csv(train_data_filename)\ntest_data = pd.read_csv(test_data_filename)\n\ntrain_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-17T21:07:51.907683Z","iopub.execute_input":"2024-12-17T21:07:51.908203Z","iopub.status.idle":"2024-12-17T21:08:06.311886Z","shell.execute_reply.started":"2024-12-17T21:07:51.908166Z","shell.execute_reply":"2024-12-17T21:08:06.307112Z"}},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   id   Age  Gender  Annual Income Marital Status  Number of Dependents  \\\n0   0  19.0  Female        10049.0        Married                   1.0   \n1   1  39.0  Female        31678.0       Divorced                   3.0   \n2   2  23.0    Male        25602.0       Divorced                   3.0   \n3   3  21.0    Male       141855.0        Married                   2.0   \n4   4  21.0    Male        39651.0         Single                   1.0   \n\n  Education Level     Occupation  Health Score  Location  ... Previous Claims  \\\n0      Bachelor's  Self-Employed     22.598761     Urban  ...             2.0   \n1        Master's            NaN     15.569731     Rural  ...             1.0   \n2     High School  Self-Employed     47.177549  Suburban  ...             1.0   \n3      Bachelor's            NaN     10.938144     Rural  ...             1.0   \n4      Bachelor's  Self-Employed     20.376094     Rural  ...             0.0   \n\n   Vehicle Age  Credit Score  Insurance Duration           Policy Start Date  \\\n0         17.0         372.0                 5.0  2023-12-23 15:21:39.134960   \n1         12.0         694.0                 2.0  2023-06-12 15:21:39.111551   \n2         14.0           NaN                 3.0  2023-09-30 15:21:39.221386   \n3          0.0         367.0                 1.0  2024-06-12 15:21:39.226954   \n4          8.0         598.0                 4.0  2021-12-01 15:21:39.252145   \n\n  Customer Feedback Smoking Status Exercise Frequency Property Type  \\\n0              Poor             No             Weekly         House   \n1           Average            Yes            Monthly         House   \n2              Good            Yes             Weekly         House   \n3              Poor            Yes              Daily     Apartment   \n4              Poor            Yes             Weekly         House   \n\n  Premium Amount  \n0         2869.0  \n1         1483.0  \n2          567.0  \n3          765.0  \n4         2022.0  \n\n[5 rows x 21 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Annual Income</th>\n      <th>Marital Status</th>\n      <th>Number of Dependents</th>\n      <th>Education Level</th>\n      <th>Occupation</th>\n      <th>Health Score</th>\n      <th>Location</th>\n      <th>...</th>\n      <th>Previous Claims</th>\n      <th>Vehicle Age</th>\n      <th>Credit Score</th>\n      <th>Insurance Duration</th>\n      <th>Policy Start Date</th>\n      <th>Customer Feedback</th>\n      <th>Smoking Status</th>\n      <th>Exercise Frequency</th>\n      <th>Property Type</th>\n      <th>Premium Amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>19.0</td>\n      <td>Female</td>\n      <td>10049.0</td>\n      <td>Married</td>\n      <td>1.0</td>\n      <td>Bachelor's</td>\n      <td>Self-Employed</td>\n      <td>22.598761</td>\n      <td>Urban</td>\n      <td>...</td>\n      <td>2.0</td>\n      <td>17.0</td>\n      <td>372.0</td>\n      <td>5.0</td>\n      <td>2023-12-23 15:21:39.134960</td>\n      <td>Poor</td>\n      <td>No</td>\n      <td>Weekly</td>\n      <td>House</td>\n      <td>2869.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>39.0</td>\n      <td>Female</td>\n      <td>31678.0</td>\n      <td>Divorced</td>\n      <td>3.0</td>\n      <td>Master's</td>\n      <td>NaN</td>\n      <td>15.569731</td>\n      <td>Rural</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>12.0</td>\n      <td>694.0</td>\n      <td>2.0</td>\n      <td>2023-06-12 15:21:39.111551</td>\n      <td>Average</td>\n      <td>Yes</td>\n      <td>Monthly</td>\n      <td>House</td>\n      <td>1483.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>23.0</td>\n      <td>Male</td>\n      <td>25602.0</td>\n      <td>Divorced</td>\n      <td>3.0</td>\n      <td>High School</td>\n      <td>Self-Employed</td>\n      <td>47.177549</td>\n      <td>Suburban</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>14.0</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>2023-09-30 15:21:39.221386</td>\n      <td>Good</td>\n      <td>Yes</td>\n      <td>Weekly</td>\n      <td>House</td>\n      <td>567.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>21.0</td>\n      <td>Male</td>\n      <td>141855.0</td>\n      <td>Married</td>\n      <td>2.0</td>\n      <td>Bachelor's</td>\n      <td>NaN</td>\n      <td>10.938144</td>\n      <td>Rural</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>367.0</td>\n      <td>1.0</td>\n      <td>2024-06-12 15:21:39.226954</td>\n      <td>Poor</td>\n      <td>Yes</td>\n      <td>Daily</td>\n      <td>Apartment</td>\n      <td>765.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>21.0</td>\n      <td>Male</td>\n      <td>39651.0</td>\n      <td>Single</td>\n      <td>1.0</td>\n      <td>Bachelor's</td>\n      <td>Self-Employed</td>\n      <td>20.376094</td>\n      <td>Rural</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>598.0</td>\n      <td>4.0</td>\n      <td>2021-12-01 15:21:39.252145</td>\n      <td>Poor</td>\n      <td>Yes</td>\n      <td>Weekly</td>\n      <td>House</td>\n      <td>2022.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 21 columns</p>\n</div>"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"import gc\n\n# split data\ndef process_data(data, is_train=False):\n    \n    df = data.drop([\"id\"], axis=1)\n    if is_train: df = df.drop([\"Premium Amount\"], axis=1)\n    dates = pd.to_datetime(df[\"Policy Start Date\"])\n    df = df.drop([\"Policy Start Date\"], axis=1)\n    \n    df[\"Policy Start is Weekend\"] = dates.dt.dayofweek > 4\n    df[\"Policy Start Year\"] = dates.dt.year\n    df[\"Policy Start Month\"] = dates.dt.month\n    \n    df = pd.get_dummies(df, dtype=float) # one hot encoding\n    for col in df.columns[df.isnull().any(axis=0)]:\n        df = df[col].fillna(df[col].mean())\n\n    return df\n\n\n\nX_train = process_data(train_data, is_train=True)\ny_train = train_data[\"Premium Amount\"]\n\ngc.collect()\n\nX_test = process_data(test_data)\n\nX_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-17T21:11:15.551787Z","iopub.execute_input":"2024-12-17T21:11:15.552241Z","iopub.status.idle":"2024-12-17T21:11:20.803120Z","shell.execute_reply.started":"2024-12-17T21:11:15.552200Z","shell.execute_reply":"2024-12-17T21:11:20.801756Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_250/2262651062.py:17: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df[col].fillna(df[col].mean(), inplace=True)\n/tmp/ipykernel_250/2262651062.py:17: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df[col].fillna(df[col].mean(), inplace=True)\n","output_type":"stream"},{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"    Age  Annual Income  Number of Dependents  Health Score  Previous Claims  \\\n0  19.0        10049.0                   1.0     22.598761              2.0   \n1  39.0        31678.0                   3.0     15.569731              1.0   \n2  23.0        25602.0                   3.0     47.177549              1.0   \n3  21.0       141855.0                   2.0     10.938144              1.0   \n4  21.0        39651.0                   1.0     20.376094              0.0   \n\n   Vehicle Age  Credit Score  Insurance Duration  Policy Start is Weekend  \\\n0         17.0     372.00000                 5.0                     True   \n1         12.0     694.00000                 2.0                    False   \n2         14.0     592.92435                 3.0                     True   \n3          0.0     367.00000                 1.0                    False   \n4          8.0     598.00000                 4.0                    False   \n\n   Policy Start Year  ...  Customer Feedback_Poor  Smoking Status_No  \\\n0               2023  ...                     1.0                1.0   \n1               2023  ...                     0.0                0.0   \n2               2023  ...                     0.0                0.0   \n3               2024  ...                     1.0                0.0   \n4               2021  ...                     1.0                0.0   \n\n   Smoking Status_Yes  Exercise Frequency_Daily  Exercise Frequency_Monthly  \\\n0                 0.0                       0.0                         0.0   \n1                 1.0                       0.0                         1.0   \n2                 1.0                       0.0                         0.0   \n3                 1.0                       1.0                         0.0   \n4                 1.0                       0.0                         0.0   \n\n   Exercise Frequency_Rarely  Exercise Frequency_Weekly  \\\n0                        0.0                        1.0   \n1                        0.0                        0.0   \n2                        0.0                        1.0   \n3                        0.0                        0.0   \n4                        0.0                        1.0   \n\n   Property Type_Apartment  Property Type_Condo  Property Type_House  \n0                      0.0                  0.0                  1.0  \n1                      0.0                  0.0                  1.0  \n2                      0.0                  0.0                  1.0  \n3                      1.0                  0.0                  0.0  \n4                      0.0                  0.0                  1.0  \n\n[5 rows x 41 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Annual Income</th>\n      <th>Number of Dependents</th>\n      <th>Health Score</th>\n      <th>Previous Claims</th>\n      <th>Vehicle Age</th>\n      <th>Credit Score</th>\n      <th>Insurance Duration</th>\n      <th>Policy Start is Weekend</th>\n      <th>Policy Start Year</th>\n      <th>...</th>\n      <th>Customer Feedback_Poor</th>\n      <th>Smoking Status_No</th>\n      <th>Smoking Status_Yes</th>\n      <th>Exercise Frequency_Daily</th>\n      <th>Exercise Frequency_Monthly</th>\n      <th>Exercise Frequency_Rarely</th>\n      <th>Exercise Frequency_Weekly</th>\n      <th>Property Type_Apartment</th>\n      <th>Property Type_Condo</th>\n      <th>Property Type_House</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19.0</td>\n      <td>10049.0</td>\n      <td>1.0</td>\n      <td>22.598761</td>\n      <td>2.0</td>\n      <td>17.0</td>\n      <td>372.00000</td>\n      <td>5.0</td>\n      <td>True</td>\n      <td>2023</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>39.0</td>\n      <td>31678.0</td>\n      <td>3.0</td>\n      <td>15.569731</td>\n      <td>1.0</td>\n      <td>12.0</td>\n      <td>694.00000</td>\n      <td>2.0</td>\n      <td>False</td>\n      <td>2023</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>23.0</td>\n      <td>25602.0</td>\n      <td>3.0</td>\n      <td>47.177549</td>\n      <td>1.0</td>\n      <td>14.0</td>\n      <td>592.92435</td>\n      <td>3.0</td>\n      <td>True</td>\n      <td>2023</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>21.0</td>\n      <td>141855.0</td>\n      <td>2.0</td>\n      <td>10.938144</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>367.00000</td>\n      <td>1.0</td>\n      <td>False</td>\n      <td>2024</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>21.0</td>\n      <td>39651.0</td>\n      <td>1.0</td>\n      <td>20.376094</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>598.00000</td>\n      <td>4.0</td>\n      <td>False</td>\n      <td>2021</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 41 columns</p>\n</div>"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"# load and fit elastic net model\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nimport xgboost as xgb\nfrom sklearn.metrics import mean_absolute_error\n\n\n# final_model = Lasso()\n\n# final_model.fit(X_train)\n\nfinal_model = None\nbest_mae = float(\"inf\")\n\nfor l1_rat in range(0, 11):\n    my_model = ElasticNet(l1_ratio=l1_rat/10.0)\n    my_model.fit(X_train, y_train)\n    mae = mean_absolute_error(y_train, my_model.predict(X_train))\n\n    if mae < best_mae:\n        final_model = my_model\n        best_mae = mae\n\n\n# # xgb version\n# param = {'max_depth': 2, 'eta': 1, 'objective': 'binary:logistic'}\n# param['nthread'] = 4\n# param['eval_metric'] = ['auc', 'ams@0']\n\n# d_train = xgb.DMatrix(X_train, )\n# final_model = xgb.train(param, X_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-17T21:13:52.364684Z","iopub.execute_input":"2024-12-17T21:13:52.365142Z","iopub.status.idle":"2024-12-17T21:16:20.613602Z","shell.execute_reply.started":"2024-12-17T21:13:52.365105Z","shell.execute_reply":"2024-12-17T21:16:20.611741Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.481e+11, tolerance: 8.979e+07 Linear regression models with null weight for the l1 regularization term are more efficiently fitted using one of the solvers implemented in sklearn.linear_model.Ridge/RidgeCV instead.\n  model = cd_fast.enet_coordinate_descent(\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"# make predictions and submit\npredictions = final_model.predict(X_test)\n\npredictions = pd.DataFrame({\"id\" : test_data[\"id\"], \"Premium Amount\" : predictions})\n\nprint(predictions.head())\n\npredictions.to_csv(\"/kaggle/working/submission.csv\", index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-17T21:17:52.855602Z","iopub.execute_input":"2024-12-17T21:17:52.856134Z","iopub.status.idle":"2024-12-17T21:17:54.892912Z","shell.execute_reply.started":"2024-12-17T21:17:52.856095Z","shell.execute_reply":"2024-12-17T21:17:54.891813Z"}},"outputs":[{"name":"stdout","text":"        id  Premium Amount\n0  1200000     1093.042763\n1  1200001     1059.854591\n2  1200002     1051.945881\n3  1200003     1045.639187\n4  1200004     1075.675359\n","output_type":"stream"}],"execution_count":11}]}