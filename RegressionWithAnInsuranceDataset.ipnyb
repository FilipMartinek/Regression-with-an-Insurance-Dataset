{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":84896,"databundleVersionId":10305135,"sourceType":"competition"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T22:33:52.081123Z","iopub.execute_input":"2024-12-01T22:33:52.081692Z","iopub.status.idle":"2024-12-01T22:33:52.091675Z","shell.execute_reply.started":"2024-12-01T22:33:52.081641Z","shell.execute_reply":"2024-12-01T22:33:52.090357Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e12/sample_submission.csv\n/kaggle/input/playground-series-s4e12/train.csv\n/kaggle/input/playground-series-s4e12/test.csv\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# load data\ntrain_data_filename = \"/kaggle/input/playground-series-s4e12/train.csv\"\ntest_data_filename = \"/kaggle/input/playground-series-s4e12/test.csv\"\ntrain_data = pd.read_csv(train_data_filename)\ntest_data = pd.read_csv(test_data_filename)\n\nprint(train_data.dtypes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T22:33:52.094361Z","iopub.execute_input":"2024-12-01T22:33:52.094826Z","iopub.status.idle":"2024-12-01T22:33:59.869012Z","shell.execute_reply.started":"2024-12-01T22:33:52.094777Z","shell.execute_reply":"2024-12-01T22:33:59.867996Z"}},"outputs":[{"name":"stdout","text":"id                        int64\nAge                     float64\nGender                   object\nAnnual Income           float64\nMarital Status           object\nNumber of Dependents    float64\nEducation Level          object\nOccupation               object\nHealth Score            float64\nLocation                 object\nPolicy Type              object\nPrevious Claims         float64\nVehicle Age             float64\nCredit Score            float64\nInsurance Duration      float64\nPolicy Start Date        object\nCustomer Feedback        object\nSmoking Status           object\nExercise Frequency       object\nProperty Type            object\nPremium Amount          float64\ndtype: object\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"# split data\n\nX_train = train_data.drop([\"id\", \"Premium Amount\"], axis=1)\nX_train[\"Policy Start Date\"] = pd.to_datetime(X_train[\"Policy Start Date\"]).values.astype(\"float64\")\nX_train = pd.get_dummies(X_train, dummy_na=True, dtype=float) # one hot encoding\nX_train = X_train.fillna(0)\ny_train = train_data[\"Premium Amount\"]\n\nX_test = test_data.drop([\"id\"], axis=1)\nX_test[\"Policy Start Date\"] = pd.to_datetime(X_test[\"Policy Start Date\"]).values.astype(\"float64\")\nX_test = pd.get_dummies(X_test, dummy_na=True, dtype=float) # one hot encoding\nX_test = X_test.fillna(0)\n\nprint(X_train.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T22:33:59.870788Z","iopub.execute_input":"2024-12-01T22:33:59.871086Z","iopub.status.idle":"2024-12-01T22:34:03.467146Z","shell.execute_reply.started":"2024-12-01T22:33:59.871058Z","shell.execute_reply":"2024-12-01T22:34:03.465998Z"}},"outputs":[{"name":"stdout","text":"    Age  Annual Income  Number of Dependents  Health Score  Previous Claims  \\\n0  19.0        10049.0                   1.0     22.598761              2.0   \n1  39.0        31678.0                   3.0     15.569731              1.0   \n2  23.0        25602.0                   3.0     47.177549              1.0   \n3  21.0       141855.0                   2.0     10.938144              1.0   \n4  21.0        39651.0                   1.0     20.376094              0.0   \n\n   Vehicle Age  Credit Score  Insurance Duration  Policy Start Date  \\\n0         17.0         372.0                 5.0       1.703345e+18   \n1         12.0         694.0                 2.0       1.686583e+18   \n2         14.0           0.0                 3.0       1.696087e+18   \n3          0.0         367.0                 1.0       1.718206e+18   \n4          8.0         598.0                 4.0       1.638372e+18   \n\n   Gender_Female  ...  Smoking Status_nan  Exercise Frequency_Daily  \\\n0            1.0  ...                 0.0                       0.0   \n1            1.0  ...                 0.0                       0.0   \n2            0.0  ...                 0.0                       0.0   \n3            0.0  ...                 0.0                       1.0   \n4            0.0  ...                 0.0                       0.0   \n\n   Exercise Frequency_Monthly  Exercise Frequency_Rarely  \\\n0                         0.0                        0.0   \n1                         1.0                        0.0   \n2                         0.0                        0.0   \n3                         0.0                        0.0   \n4                         0.0                        0.0   \n\n   Exercise Frequency_Weekly  Exercise Frequency_nan  Property Type_Apartment  \\\n0                        1.0                     0.0                      0.0   \n1                        0.0                     0.0                      0.0   \n2                        1.0                     0.0                      0.0   \n3                        0.0                     0.0                      1.0   \n4                        1.0                     0.0                      0.0   \n\n   Property Type_Condo  Property Type_House  Property Type_nan  \n0                  0.0                  1.0                0.0  \n1                  0.0                  1.0                0.0  \n2                  0.0                  1.0                0.0  \n3                  0.0                  0.0                0.0  \n4                  0.0                  1.0                0.0  \n\n[5 rows x 49 columns]\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"# load and fit elastic net model\nfrom sklearn.linear_model import ElasticNet\n\nmy_model = ElasticNet(max_iter=2000)\n\nmy_model.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T22:34:03.468579Z","iopub.execute_input":"2024-12-01T22:34:03.468989Z","iopub.status.idle":"2024-12-01T22:36:24.159142Z","shell.execute_reply.started":"2024-12-01T22:34:03.468943Z","shell.execute_reply":"2024-12-01T22:36:24.158238Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.474e+11, tolerance: 8.979e+07\n  model = cd_fast.enet_coordinate_descent(\n","output_type":"stream"},{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"ElasticNet(max_iter=2000)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ElasticNet(max_iter=2000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ElasticNet</label><div class=\"sk-toggleable__content\"><pre>ElasticNet(max_iter=2000)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"# make predictions and submit\npredictions = my_model.predict(X_test)\n\npredictions = pd.DataFrame({\"id\" : test_data[\"id\"], \"Premium Amount\" : predictions}).reset_index(drop=True)\n\nprint(predictions.head())\n\npredictions.to_csv(\"/kaggle/working/submission.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T22:36:24.161455Z","iopub.execute_input":"2024-12-01T22:36:24.161843Z","iopub.status.idle":"2024-12-01T22:36:26.396180Z","shell.execute_reply.started":"2024-12-01T22:36:24.161803Z","shell.execute_reply":"2024-12-01T22:36:26.395056Z"}},"outputs":[{"name":"stdout","text":"        id  Premium Amount\n0  1200000     1096.647321\n1  1200001     1058.319261\n2  1200002     1071.529968\n3  1200003     1085.212508\n4  1200004     1078.281706\n","output_type":"stream"}],"execution_count":10}]}