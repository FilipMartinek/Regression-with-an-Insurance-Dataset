{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":84896,"databundleVersionId":10305135,"sourceType":"competition"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-19T12:57:04.933796Z","iopub.execute_input":"2024-12-19T12:57:04.934180Z","iopub.status.idle":"2024-12-19T12:57:04.944388Z","shell.execute_reply.started":"2024-12-19T12:57:04.934146Z","shell.execute_reply":"2024-12-19T12:57:04.943267Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e12/sample_submission.csv\n/kaggle/input/playground-series-s4e12/train.csv\n/kaggle/input/playground-series-s4e12/test.csv\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"# load data\ntrain_data_filename = \"/kaggle/input/playground-series-s4e12/train.csv\"\ntest_data_filename = \"/kaggle/input/playground-series-s4e12/test.csv\"\ntrain_data = pd.read_csv(train_data_filename)\ntest_data = pd.read_csv(test_data_filename)\n\nprint(list(train_data.columns))\ntrain_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T12:57:04.946311Z","iopub.execute_input":"2024-12-19T12:57:04.946701Z","iopub.status.idle":"2024-12-19T12:57:12.288867Z","shell.execute_reply.started":"2024-12-19T12:57:04.946668Z","shell.execute_reply":"2024-12-19T12:57:12.287577Z"}},"outputs":[{"name":"stdout","text":"['id', 'Age', 'Gender', 'Annual Income', 'Marital Status', 'Number of Dependents', 'Education Level', 'Occupation', 'Health Score', 'Location', 'Policy Type', 'Previous Claims', 'Vehicle Age', 'Credit Score', 'Insurance Duration', 'Policy Start Date', 'Customer Feedback', 'Smoking Status', 'Exercise Frequency', 'Property Type', 'Premium Amount']\n","output_type":"stream"},{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"   id   Age  Gender  Annual Income Marital Status  Number of Dependents  \\\n0   0  19.0  Female        10049.0        Married                   1.0   \n1   1  39.0  Female        31678.0       Divorced                   3.0   \n2   2  23.0    Male        25602.0       Divorced                   3.0   \n3   3  21.0    Male       141855.0        Married                   2.0   \n4   4  21.0    Male        39651.0         Single                   1.0   \n\n  Education Level     Occupation  Health Score  Location  ... Previous Claims  \\\n0      Bachelor's  Self-Employed     22.598761     Urban  ...             2.0   \n1        Master's            NaN     15.569731     Rural  ...             1.0   \n2     High School  Self-Employed     47.177549  Suburban  ...             1.0   \n3      Bachelor's            NaN     10.938144     Rural  ...             1.0   \n4      Bachelor's  Self-Employed     20.376094     Rural  ...             0.0   \n\n   Vehicle Age  Credit Score  Insurance Duration           Policy Start Date  \\\n0         17.0         372.0                 5.0  2023-12-23 15:21:39.134960   \n1         12.0         694.0                 2.0  2023-06-12 15:21:39.111551   \n2         14.0           NaN                 3.0  2023-09-30 15:21:39.221386   \n3          0.0         367.0                 1.0  2024-06-12 15:21:39.226954   \n4          8.0         598.0                 4.0  2021-12-01 15:21:39.252145   \n\n  Customer Feedback Smoking Status Exercise Frequency Property Type  \\\n0              Poor             No             Weekly         House   \n1           Average            Yes            Monthly         House   \n2              Good            Yes             Weekly         House   \n3              Poor            Yes              Daily     Apartment   \n4              Poor            Yes             Weekly         House   \n\n  Premium Amount  \n0         2869.0  \n1         1483.0  \n2          567.0  \n3          765.0  \n4         2022.0  \n\n[5 rows x 21 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Annual Income</th>\n      <th>Marital Status</th>\n      <th>Number of Dependents</th>\n      <th>Education Level</th>\n      <th>Occupation</th>\n      <th>Health Score</th>\n      <th>Location</th>\n      <th>...</th>\n      <th>Previous Claims</th>\n      <th>Vehicle Age</th>\n      <th>Credit Score</th>\n      <th>Insurance Duration</th>\n      <th>Policy Start Date</th>\n      <th>Customer Feedback</th>\n      <th>Smoking Status</th>\n      <th>Exercise Frequency</th>\n      <th>Property Type</th>\n      <th>Premium Amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>19.0</td>\n      <td>Female</td>\n      <td>10049.0</td>\n      <td>Married</td>\n      <td>1.0</td>\n      <td>Bachelor's</td>\n      <td>Self-Employed</td>\n      <td>22.598761</td>\n      <td>Urban</td>\n      <td>...</td>\n      <td>2.0</td>\n      <td>17.0</td>\n      <td>372.0</td>\n      <td>5.0</td>\n      <td>2023-12-23 15:21:39.134960</td>\n      <td>Poor</td>\n      <td>No</td>\n      <td>Weekly</td>\n      <td>House</td>\n      <td>2869.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>39.0</td>\n      <td>Female</td>\n      <td>31678.0</td>\n      <td>Divorced</td>\n      <td>3.0</td>\n      <td>Master's</td>\n      <td>NaN</td>\n      <td>15.569731</td>\n      <td>Rural</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>12.0</td>\n      <td>694.0</td>\n      <td>2.0</td>\n      <td>2023-06-12 15:21:39.111551</td>\n      <td>Average</td>\n      <td>Yes</td>\n      <td>Monthly</td>\n      <td>House</td>\n      <td>1483.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>23.0</td>\n      <td>Male</td>\n      <td>25602.0</td>\n      <td>Divorced</td>\n      <td>3.0</td>\n      <td>High School</td>\n      <td>Self-Employed</td>\n      <td>47.177549</td>\n      <td>Suburban</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>14.0</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>2023-09-30 15:21:39.221386</td>\n      <td>Good</td>\n      <td>Yes</td>\n      <td>Weekly</td>\n      <td>House</td>\n      <td>567.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>21.0</td>\n      <td>Male</td>\n      <td>141855.0</td>\n      <td>Married</td>\n      <td>2.0</td>\n      <td>Bachelor's</td>\n      <td>NaN</td>\n      <td>10.938144</td>\n      <td>Rural</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>367.0</td>\n      <td>1.0</td>\n      <td>2024-06-12 15:21:39.226954</td>\n      <td>Poor</td>\n      <td>Yes</td>\n      <td>Daily</td>\n      <td>Apartment</td>\n      <td>765.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>21.0</td>\n      <td>Male</td>\n      <td>39651.0</td>\n      <td>Single</td>\n      <td>1.0</td>\n      <td>Bachelor's</td>\n      <td>Self-Employed</td>\n      <td>20.376094</td>\n      <td>Rural</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>598.0</td>\n      <td>4.0</td>\n      <td>2021-12-01 15:21:39.252145</td>\n      <td>Poor</td>\n      <td>Yes</td>\n      <td>Weekly</td>\n      <td>House</td>\n      <td>2022.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 21 columns</p>\n</div>"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"import gc\n\nfull_dict = [\n    [\"Marital Status\", {\"Single\" : 1, \"Divorced\" : 2, \"Married\" : 3, np.nan : None}],\n    [\"Education Level\", {\"High School\" : 1, \"Bachelor's\" : 2, \"Master's\" : 3, \"PhD\" : 4, np.nan : None}],\n    [\"Occupation\", {\"Unemployed\" : 1, \"Self-Employed\" : 2, \"Employed\" : 3, np.nan : None}],\n    [\"Location\", {\"Rural\" : 1, \"Suburban\" : 2, \"Urban\" : 3, np.nan : None}],\n    [\"Policy Type\", {\"Basic\" : 1, \"Comprehensive\" : 2, \"Premium\" : 3, np.nan : None}],\n    [\"Customer Feedback\", {\"Poor\" : 1, \"Average\" : 2, \"Good\" : 3, np.nan : None}],\n    [\"Exercise Frequency\", {\"Rarely\" : 1, \"Monthly\" : 2, \"Weekly\" : 3, \"Daily\" : 4, np.nan : None}],\n    [\"Property Type\", {\"Apartment\" : 1, \"Condo\" : 2, \"House\" : 3, np.nan : None}],\n]\n\ndict = {}\n\ndef categorize(val):\n    return dict[val]\n\ndef process_data(data, is_train=False):\n    \n    df = data.drop([\"id\"], axis=1)\n    if is_train: df = df.drop([\"Premium Amount\"], axis=1)\n    dates = pd.to_datetime(df[\"Policy Start Date\"])\n    df = df.drop([\"Policy Start Date\"], axis=1)\n\n    global dict\n    # manually encode some values\n    for col, d in full_dict:\n        dict = d\n        df[col] = df[col].apply(categorize) \n    \n    df[\"Policy Start is Weekend\"] = dates.dt.dayofweek > 4\n    df[\"Policy Start Year\"] = dates.dt.year\n    df[\"Policy Start Month\"] = dates.dt.month\n    df[\"Policy Start\"] = dates.dt.date.value_counts()\n\n    df = pd.get_dummies(df, dtype=float) # one hot encoding\n    # for col in df.columns[df.isnull().any(axis=0)]:\n    #     df[col].fillna(df[col].mean(), inplace=True)\n    \n    # drop unnecessary\n    df = df.drop([\"Smoking Status_No\", \"Gender_Female\"], axis=1)\n\n    return df\n\n\n\n# split data\n\nX_train = process_data(train_data, is_train=True)\ny_train = train_data[\"Premium Amount\"]\n\ngc.collect()\n\nX_test = process_data(test_data)\n\nprint(list(X_train.columns))\nX_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T12:57:12.290186Z","iopub.execute_input":"2024-12-19T12:57:12.290538Z","iopub.status.idle":"2024-12-19T12:57:21.463677Z","shell.execute_reply.started":"2024-12-19T12:57:12.290503Z","shell.execute_reply":"2024-12-19T12:57:21.462531Z"}},"outputs":[{"name":"stdout","text":"['Age', 'Annual Income', 'Marital Status', 'Number of Dependents', 'Education Level', 'Occupation', 'Health Score', 'Location', 'Policy Type', 'Previous Claims', 'Vehicle Age', 'Credit Score', 'Insurance Duration', 'Customer Feedback', 'Exercise Frequency', 'Property Type', 'Policy Start is Weekend', 'Policy Start Year', 'Policy Start Month', 'Policy Start', 'Gender_Male', 'Smoking Status_Yes']\n","output_type":"stream"},{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"    Age  Annual Income  Marital Status  Number of Dependents  Education Level  \\\n0  19.0        10049.0             3.0                   1.0                2   \n1  39.0        31678.0             2.0                   3.0                3   \n2  23.0        25602.0             2.0                   3.0                1   \n3  21.0       141855.0             3.0                   2.0                2   \n4  21.0        39651.0             1.0                   1.0                2   \n\n   Occupation  Health Score  Location  Policy Type  Previous Claims  ...  \\\n0         2.0     22.598761         3            3              2.0  ...   \n1         NaN     15.569731         1            2              1.0  ...   \n2         2.0     47.177549         2            3              1.0  ...   \n3         NaN     10.938144         1            1              1.0  ...   \n4         2.0     20.376094         1            3              0.0  ...   \n\n   Insurance Duration  Customer Feedback  Exercise Frequency  Property Type  \\\n0                 5.0                1.0                   3              3   \n1                 2.0                2.0                   2              3   \n2                 3.0                3.0                   3              3   \n3                 1.0                1.0                   4              1   \n4                 4.0                1.0                   3              3   \n\n   Policy Start is Weekend  Policy Start Year  Policy Start Month  \\\n0                     True               2023                  12   \n1                    False               2023                   6   \n2                     True               2023                   9   \n3                    False               2024                   6   \n4                    False               2021                  12   \n\n   Policy Start  Gender_Male  Smoking Status_Yes  \n0           NaN          0.0                 0.0  \n1           NaN          0.0                 1.0  \n2           NaN          1.0                 1.0  \n3           NaN          1.0                 1.0  \n4           NaN          1.0                 1.0  \n\n[5 rows x 22 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Annual Income</th>\n      <th>Marital Status</th>\n      <th>Number of Dependents</th>\n      <th>Education Level</th>\n      <th>Occupation</th>\n      <th>Health Score</th>\n      <th>Location</th>\n      <th>Policy Type</th>\n      <th>Previous Claims</th>\n      <th>...</th>\n      <th>Insurance Duration</th>\n      <th>Customer Feedback</th>\n      <th>Exercise Frequency</th>\n      <th>Property Type</th>\n      <th>Policy Start is Weekend</th>\n      <th>Policy Start Year</th>\n      <th>Policy Start Month</th>\n      <th>Policy Start</th>\n      <th>Gender_Male</th>\n      <th>Smoking Status_Yes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19.0</td>\n      <td>10049.0</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>22.598761</td>\n      <td>3</td>\n      <td>3</td>\n      <td>2.0</td>\n      <td>...</td>\n      <td>5.0</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>3</td>\n      <td>True</td>\n      <td>2023</td>\n      <td>12</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>39.0</td>\n      <td>31678.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3</td>\n      <td>NaN</td>\n      <td>15.569731</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>3</td>\n      <td>False</td>\n      <td>2023</td>\n      <td>6</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>23.0</td>\n      <td>25602.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>1</td>\n      <td>2.0</td>\n      <td>47.177549</td>\n      <td>2</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>3</td>\n      <td>3</td>\n      <td>True</td>\n      <td>2023</td>\n      <td>9</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>21.0</td>\n      <td>141855.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>NaN</td>\n      <td>10.938144</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>False</td>\n      <td>2024</td>\n      <td>6</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>21.0</td>\n      <td>39651.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>20.376094</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>3</td>\n      <td>False</td>\n      <td>2021</td>\n      <td>12</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 22 columns</p>\n</div>"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"# load and fit elastic net model\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Lasso\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n\n# final_model = Lasso()\n\n# final_model.fit(X_train, y_train)\n\n# final_model = None\n# best_mae = float(\"inf\")\n\n# for l1_rat in range(0, 11):\n#     my_model = ElasticNet(l1_ratio=l1_rat/10.0)\n#     my_model.fit(X_train, y_train)\n#     mae = mean_absolute_error(y_train, my_model.predict(X_train))\n\n#     if mae < best_mae:\n#         final_model = my_model\n#         best_mae = mae\n\n\n# xgb version\n# params = {\n#     # Core Parameters\n#     'objective': 'reg:squaredlogerror',  # Use squared logarithmic error for regression\n#     'booster': 'gbtree',\n    \n#     # Tree Parameters\n#     'max_depth': 6,\n#     'learning_rate': 0.1,\n#     'n_estimators': 500,\n#     'min_child_weight': 3,\n    \n#     # Regularization\n#     'gamma': 0.1,\n#     'subsample': 0.8,\n#     'colsample_bytree': 0.8,\n#     'lambda': 1.0,\n#     'alpha': 0.5,\n    \n#     # Categorical Handling\n#     'enable_categorical': True,         # If XGBoost >= 1.5\n    \n#     # Performance\n#     'tree_method': 'gpu_hist',              # 'hist' for CPU, 'gpu_hist' for GPU acceleration\n#     'early_stopping_rounds': 50,        # Stops training if no improvement\n#     'eval_metric': 'rmsle',             # Root Mean Squared Logarithmic Error\n    \n#     # Randomness\n#     'random_state': 42\n# }\n\nfinal_model = XGBRegressor(\n    objective=\"reg:squaredlogerror\",\n    booster=\"gbtree\",\n    max_depth=6,\n    learning_rate=.1,\n    eval_metric=\"rmsle\",\n    random_state=42\n)\nfinal_model.fit(X_train, y_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T12:57:21.464878Z","iopub.execute_input":"2024-12-19T12:57:21.465177Z","iopub.status.idle":"2024-12-19T12:57:33.270141Z","shell.execute_reply.started":"2024-12-19T12:57:21.465149Z","shell.execute_reply":"2024-12-19T12:57:33.268982Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"XGBRegressor(base_score=None, booster='gbtree', callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric='rmsle', feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.1, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=6, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=None, n_jobs=None,\n             num_parallel_tree=None, objective='reg:squaredlogerror', ...)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=&#x27;gbtree&#x27;, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=&#x27;rmsle&#x27;, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.1, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=6, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=None, n_jobs=None,\n             num_parallel_tree=None, objective=&#x27;reg:squaredlogerror&#x27;, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=&#x27;gbtree&#x27;, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=&#x27;rmsle&#x27;, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.1, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=6, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=None, n_jobs=None,\n             num_parallel_tree=None, objective=&#x27;reg:squaredlogerror&#x27;, ...)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"# make predictions and submit\npredictions = final_model.predict(X_test)\n\npredictions = pd.DataFrame({\"id\" : test_data[\"id\"], \"Premium Amount\" : predictions})\n\nprint(predictions.head())\n\npredictions.to_csv(\"/kaggle/working/submission.csv\", index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T12:57:33.272631Z","iopub.execute_input":"2024-12-19T12:57:33.272981Z","iopub.status.idle":"2024-12-19T12:57:36.225537Z","shell.execute_reply.started":"2024-12-19T12:57:33.272947Z","shell.execute_reply":"2024-12-19T12:57:36.224320Z"}},"outputs":[{"name":"stdout","text":"        id  Premium Amount\n0  1200000      627.602051\n1  1200001      537.852600\n2  1200002      627.602051\n3  1200003      627.602051\n4  1200004      627.602051\n","output_type":"stream"}],"execution_count":13}]}